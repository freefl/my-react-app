{"version":3,"sources":["assets/flower.jpg","Home.js","About.js","Contact.js","NoMatch.js","components/Layout.js","components/NavigationBar.js","components/Jumbotron.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Home","About","Contact","NoMatch","Layout","props","Container","children","Styles","styled","div","NavigationBar","Navbar","expand","Brand","href","Toggle","aria-controls","Collapse","id","Nav","className","Item","Link","flowerImage","Jumbotron","fluid","App","Fragment","basename","process","exact","path","component","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sGAAAA,EAAOC,QAAU,IAA0B,oC,4LCE9BC,EAAO,kBACZ,6BACI,4CACA,kECHCC,EAAQ,kBACb,6BACI,2CACA,gECHCC,EAAU,kBACf,6BACI,6CACA,2FCHCC,EAAU,kBACf,6BACI,2C,QCDCC,EAAS,SAACC,GAAD,OAClB,kBAACC,EAAA,EAAD,KACKD,EAAME,W,ySCDf,IAAMC,EAASC,IAAOC,IAAV,KAcCC,EAAgB,kBACzB,kBAACH,EAAD,KACI,kBAACI,EAAA,EAAD,CAAQC,OAAO,MACX,kBAACD,EAAA,EAAOE,MAAR,CAAcC,KAAK,KAAnB,uBACA,kBAACH,EAAA,EAAOI,OAAR,CAAeC,gBAAc,qBAC7B,kBAACL,EAAA,EAAOM,SAAR,CAAiBC,GAAG,oBAChB,kBAACC,EAAA,EAAD,CAAKC,UAAU,WACX,kBAACD,EAAA,EAAIE,KAAL,KAAU,kBAACF,EAAA,EAAIG,KAAL,CAAUR,KAAK,KAAf,SACV,kBAACK,EAAA,EAAIE,KAAL,KAAU,kBAACF,EAAA,EAAIG,KAAL,CAAUR,KAAK,UAAf,UACV,kBAACK,EAAA,EAAIE,KAAL,KAAU,kBAACF,EAAA,EAAIG,KAAL,CAAUR,KAAK,YAAf,iB,ieCpB9B,IAAMP,EAASC,IAAOC,IAAV,IAEac,KAoBXC,EAAY,kBACtB,kBAAC,EAAD,KACI,kBAAC,IAAD,CAAOC,OAAK,EAACL,UAAY,SACrB,yBAAKA,UAAU,YACf,kBAACf,EAAA,EAAD,KACI,uCACA,0DCHDqB,E,uKApBX,OACE,kBAAC,IAAMC,SAAP,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,KACA,kBAAC,IAAD,CAAQC,SAAUC,IAChB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAajC,IACnC,kBAAC,IAAD,CAAOgC,KAAK,SAASC,UAAahC,IAClC,kBAAC,IAAD,CAAO+B,KAAK,WAAWC,UAAa/B,IACpC,kBAAC,IAAD,CAAO+B,UAAa9B,Y,GAZd+B,aCEEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.b5358cb6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/flower.8c223421.jpg\";","import React from 'react'\r\n\r\nexport const Home = () =>(\r\n        <div>\r\n            <h2> Hello World</h2>\r\n            <p>This is a test using the react.js</p>\r\n        </div>\r\n)","import React from 'react'\r\n\r\nexport const About = () =>(\r\n        <div>\r\n            <h2> About Page</h2>\r\n            <p>copy right for Freefl@gmail.com</p>\r\n        </div>\r\n)","import React from 'react'\r\n\r\nexport const Contact = () =>(\r\n        <div>\r\n            <h2> Contact Info</h2>\r\n            <p>If you have any question, please email to freefl@gmail.com</p>\r\n        </div>\r\n)","import React from 'react'\r\n\r\nexport const NoMatch = () =>(\r\n        <div>\r\n            <h2> No Match</h2>\r\n        </div>\r\n)","import React from 'react';\r\nimport {Container} from 'react-bootstrap';\r\n\r\nexport const Layout = (props) => (\r\n    <Container>\r\n        {props.children}\r\n    </Container>\r\n)","import React from 'react';\r\nimport { Nav, Navbar} from 'react-bootstrap'\r\nimport styled from 'styled-components'\r\n\r\nconst Styles = styled.div`\r\n    .navbar {\r\n        backgroud-color: #222;\r\n    }\r\n\r\n    .navbar-brand, .navbar-nav . nav-link {\r\n        color: #bbb;\r\n\r\n        &ï¼šhover {\r\n            color: white;\r\n        }\r\n    }\r\n`;\r\n\r\nexport const NavigationBar = () => (\r\n    <Styles>\r\n        <Navbar expand=\"lg\">\r\n            <Navbar.Brand href=\"/\">Welcome to EEZZ Web</Navbar.Brand>\r\n            <Navbar.Toggle aria-controls=\"basic-navbar-nav\"/>\r\n            <Navbar.Collapse id=\"basic-navbar-nav\">\r\n                <Nav className=\"ml-auto\">\r\n                    <Nav.Item><Nav.Link href=\"/\">Home</Nav.Link></Nav.Item>\r\n                    <Nav.Item><Nav.Link href=\"/about\">About</Nav.Link></Nav.Item>\r\n                    <Nav.Item><Nav.Link href=\"/contact\">Contact</Nav.Link></Nav.Item>\r\n                </Nav>\r\n            </Navbar.Collapse>\r\n        </Navbar>\r\n    </Styles>\r\n)","import React from \"react\";\r\nimport { Jumbotron as Jumbo, Container} from 'react-bootstrap';\r\nimport styled from 'styled-components';\r\nimport flowerImage from '../assets/flower.jpg';\r\n//import bimage from '../assets/bimage1.jpg';\r\n\r\n\r\nconst Styles = styled.div`\r\n    .jumbo {\r\n        background:url(${flowerImage})fixed ;\r\n        backgroud-size: cover;\r\n        color: #efefef;\r\n        height:200px;\r\n        position: relative;\r\n        z-index:-2;\r\n    }\r\n    .overlay{\r\n        background-color:#000;\r\n        opacity:0.6;\r\n        position: absolute;\r\n        top:0;\r\n        left:0;\r\n        bottom:0;\r\n        right:0;\r\n        z-index:-1;\r\n\r\n    }\r\n`;\r\n\r\nexport const  Jumbotron = () => (\r\n    <Styles>\r\n        <Jumbo fluid className = \"jumbo\">\r\n            <div className=\"overlay\"></div>\r\n            <Container>\r\n                <h1>Welcome</h1>\r\n                <p>Tomorrow is Another Day</p>\r\n            </Container>\r\n        </Jumbo>\r\n    </Styles>\r\n\r\n)","import React , {Component } from 'react';\nimport {BrowserRouter as Router, Route, Switch} from 'react-router-dom';\nimport { Home} from './Home';\nimport { About} from './About';\nimport { Contact} from './Contact';\nimport { NoMatch} from './NoMatch';\nimport {Layout} from './components/Layout';\nimport {NavigationBar} from './components/NavigationBar';\nimport {Jumbotron} from './components/Jumbotron';\n\nclass App extends Component {\n  render(){\n    return (\n      <React.Fragment>\n        <NavigationBar />\n        <Jumbotron />\n        <Layout>\n        <Router basename={process.env.PUBLIC_URL}>\n          <Switch>\n            <Route exact path=\"/\" component = {Home} />\n            <Route path=\"/about\" component = {About} />\n            <Route path=\"/contact\" component = {Contact} />\n            <Route component = {NoMatch} />\n          </Switch> \n      </Router>\n      </Layout>\n   </React.Fragment>\n\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}